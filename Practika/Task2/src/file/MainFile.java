package file;

/*
  Задание 2.2
  Исходные данные: текстовый файл со средней длиной строки равной 10 символам (файл или прошить текст в коде).
  В реализациях используйте наиболее подходящие имплементации коллекций!
  Задание 2.2.1: Подсчитайте количество различных слов в файле.
  Задание 2.2.2: Выведите на экран список различных слов файла, отсортированный по возрастанию их длины (компаратор сначала по длине слова, потом по тексту).
  Задание 2.2.3: Подсчитайте и выведите на экран сколько раз каждое слово встречается в файле.
  Задание 2.2.4: Выведите на экран все строки файла в обратном порядке.
  Задание 2.2.5: Реализуйте свой Iterator для обхода списка в обратном порядке.
  Задание 2.2.6: Выведите на экран строки, номера которых задаются пользователем в произвольном порядке.
*/

import java.util.Map;

public class MainFile {

    public static void main(String[] args) {

        FileAnalyzer analyzer = new FileAnalyzer("text.txt");

        // Задание 2.2.1 Подсчет количество различных слов в файле.
        System.out.println("Задание 2.2.1 Подсчет количество различных слов в файле");
        int wordsCount = analyzer.getNumberOfDistinctWords();
        System.out.println("Количество различных слов в файле: " + wordsCount);
        System.out.println("--------------------------------------");


        // Задание 2.2.2 Вывод на экран списка различных слов файла, отсортированных по возрастанию их длины (компаратор сначала по длине слова, потом по тексту).
        System.out.println("Задание 2.2.2 Вывод на экран отсортированного списка различных слов");
        // а) с помощью Comparator
        System.out.println("a) сортировка");
        analyzer.printSortedWords();
        // b) c помощью stream api
        System.out.println("b) сортировка c помощью stream api");
        analyzer.printSortedWordsStreamApi();
        System.out.println("--------------------------------------");


        // Задание 2.2.3 Подсчет количества встреч слов в файле
        System.out.println("Задание 2.2.3 Подсчет количества встреч слов в файле");
        Map<String, Long> map = analyzer.countWordsOccurrence();
        // a) с помощью HashMap
        System.out.println("a) с помощью HashMap");
        System.out.println("Слово - сколько раз встречается в тексте");
        map.forEach((k, v) -> {
            System.out.println(k + " - " + v);
        });
        // б) c помощью stream api
        System.out.println("a) с помощью stream api");
        System.out.println("Слово - сколько раз встречается в тексте");
        map = analyzer.countWordsOccurrenceStreamApi();
        map.forEach((k, v) -> {
            System.out.println(k + " - " + v);
        });
        System.out.println("--------------------------------------");


        // Задание 2.2.4 Вывод на экран всех строк файла в обратном порядке.
        System.out.println("Задание 2.2.4 Вывод на экран всех строк файла в обратном порядке");
        analyzer.printReversedLines();
        System.out.println("--------------------------------------");


        // Задание 2.2.5. Реализация своего Iterator для обхода списка в обратном порядке
        System.out.println("Задание 2.2.5. Реализация своего Iterator для обхода списка в обратном порядке");
        analyzer.printReversedLinesWithMyIterator();
        System.out.println("--------------------------------------");


        // Задание 2.2.6 Вывод на экран строки, номера которых задаются пользователем в произвольном порядке.
        // Номера строк начинаются с 0
        System.out.println("Задание 2.2.6 Вывод на экран строки, номера которых задаются пользователем в произвольном порядке.");
        int [] indices = {1, 2, -5, 0, 500};
        analyzer.printLines(indices);
        System.out.println("--------------------------------------");
    }

}
